{"version":3,"sources":["redditApi.js","touchControls/touchControls.js","swiper.js","api.js","components/searchBar/searchBar.js","components/image/image.js","homeComponent.js","stores/exampleStore.js","stores/homePageStore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","get","urlPath","queryParams","query","concat","fetch","then","response","json","TouchControls","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startX","endX","endY","startY","e","console","log","changedTouches","setState","_this2","clientX","clientY","_this2$state","determineGesture","react_default","a","createElement","onTouchCancel","onTouchCancelHandler","bind","onTouchEnd","onTouchEndHandler","onTouchMove","onTouchMoveHandler","onTouchStart","onTouchStartHandler","children","onSwipeLeft","onSwipeRight","React","Component","defaultProps","onSwipeDown","onSwipeUp","Swiper","currentComponent","childCount","length","swiperRef","createRef","prevProps","prevState","snapshot","current","focus","key","next","previous","touchControls","className","onKeyDown","onKeyPressed","tabIndex","ref","nextProps","api","fetchPics","subReddit","Reddit","fetchMorePics","after","subRedditAutoComplete","SearchBar","inject","observer","onBtnClick","HomePageStore","stores","stopPropagation","showBar","onSearch","onCloseBtnClick","resetPosts","resetSearchInputValue","ClassNames","top-bar--fixed","atLeastOnePost","onClick","onChange","onChangeSearchInputValue","target","value","onKeyPress","searchInputValue","placeholder","index_esm","map","io_index_esm","Image","onLoadHandler","loading","onErrorHandler","imgClasses","image__imageTag--active","classNames","onLoad","onError","src","alt","fallbackElement","observable","isImage","RegExp","isGfyCat","Banner","HomeComponent","goFullScreen","toggleFullScreen","elem","document","documentElement","isFullScreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","constructComponent","post","test","url","toString","name","components_image_image","baseUrl","replace","params","indexOf","title","frameBorder","allowFullScreen","width","height","style","position","left","pointerEvents","makeStuff","resp","clearOld","arguments","undefined","data","posts","raw_data","last","slice","appendPosts","lastOne","fillWithPics","Api","loadMorePosts","window","onclick","_this3","searchBar_searchBar","src_swiper","toConsumableArray","postComponent","filter","pc","ExampleStore","initializerDefineProperty","exampleStore_descriptor","fetchAndSetAutoCompleteResults","results","listing","display_name","l","_this$posts","push","apply","computed","action","App","mobx_react_module","src_homeComponent","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b230c2d3.chunk.js","sourcesContent":["const HOST = \"https://www.reddit.com\";\n\nconst get = (urlPath, queryParams) => {\n  const query = queryParams ? `?${queryParams}` : \"\";\n  return fetch(`${HOST}${urlPath}.json${query}`).then(response =>\n    response.json()\n  );\n};\n\n\n\nmodule.exports = {\n  get\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass TouchControls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startX: 0,\n      endX: 0,\n      endY: 0,\n      startY: 0\n    };\n  }\n\n  static propTypes = {\n    onSwipeDown: PropTypes.func,\n    onSwipeLeft: PropTypes.func,\n    onSwipeRight: PropTypes.func,\n    onSwipeUp: PropTypes.func\n  };\n\n  static defaultProps = {\n    onSwipeDown: () => {},\n    onSwipeLeft: () => {},\n    onSwipeRight: () => {},\n    onSwipeUp: () => {}\n  };\n  onTouchCancelHandler(e) {\n    console.log(\"cancel: :->\", e.changedTouches[0]);\n    this.setState({\n      startX: 0,\n      startY: 0,\n      endX: 0,\n      endY: 0\n    });\n  }\n  onTouchEndHandler(e) {\n    const clientX = e.changedTouches[0] ? e.changedTouches[0].clientX : 0;\n    const clientY = e.changedTouches[0] ? e.changedTouches[0].clientY : 0;\n    console.log('clientX :->', clientX);\n    \n    this.setState({\n      endX: clientX,\n      endY: clientY\n    }, ()=> {\n      const { startX, startY, endX, endY } = this.state;\n      this.determineGesture(startX, startY, endX, endY);\n    });\n\n  }\n  onTouchMoveHandler(e) {\n    // console.log('move :->', e.changedTouches[0]);\n  }\n  onTouchStartHandler(e) {\n    const clientX = e.changedTouches[0] ? e.changedTouches[0].clientX : 0;\n    const clientY = e.changedTouches[0] ? e.changedTouches[0].clientY : 0;\n    this.setState({\n      startX: clientX,\n      startY: clientY\n    });\n  }\n\n  render() {\n    return (\n      <div\n        onTouchCancel={this.onTouchCancelHandler.bind(this)}\n        onTouchEnd={this.onTouchEndHandler.bind(this)}\n        onTouchMove={this.onTouchMoveHandler.bind(this)}\n        onTouchStart={this.onTouchStartHandler.bind(this)}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  determineGesture(startX, startY, endX) {\n    if (startX - endX > 100) {\n        this.props.onSwipeLeft();\n    } else if (endX - startX > 100) {\n        this.props.onSwipeRight();\n    }\n    this.setState({\n      startX: 0,\n      startY: 0,\n      endX: 0,\n      endY: 0\n    });\n  }\n}\n\nexport default TouchControls;\n","import React, { Component } from \"react\";\nimport \"./swiper.scss\";\nimport TouchControls from \"./touchControls/touchControls\";\n// import { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass Swiper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentComponent: 0,\n      childCount: props.children.length\n    };\n    this.swiperRef = React.createRef();\n\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(this.props.children.length > 0){\n      this.swiperRef.current.focus();\n      console.log(\"This ran\", this.props.children.length)\n    }\n  }\n\n  // () {\n  //   console.log(\"Focus called\")\n  //   this.swiperRef.current.focus()\n  // }\n\n  static getDerivedStateFromProps(nextProps) {\n    return {\n      childCount: nextProps.children.length\n    };\n  }\n\n  onKeyPressed(e) {\n    if (e.key === \"ArrowRight\") {\n      this.next();\n    } else if (e.key === \"ArrowLeft\") {\n      this.previous();\n    }\n  }\n\n  next() {\n    this.setState({\n      currentComponent:\n        this.state.childCount - 1 > this.state.currentComponent\n          ? this.state.currentComponent + 1\n          : 0\n    });\n  }\n\n  previous() {\n    this.setState({\n      currentComponent:\n        0 < this.state.currentComponent ? this.state.currentComponent - 1 : 0\n    });\n  }\n  render() {\n    return (\n      <TouchControls\n        onSwipeRight={this.previous.bind(this)}\n        onSwipeLeft={this.next.bind(this)}\n      >\n        <div\n          className=\"swiper\"\n          onKeyDown={e => this.onKeyPressed(e)}\n          tabIndex={0}\n          ref={this.swiperRef}\n        >\n          {this.state.childCount > 0\n            ? this.props.children[this.state.currentComponent]\n            : null}\n        </div>\n      </TouchControls>\n    );\n  }\n}\n\nexport default Swiper;\n","import Reddit from \"./redditApi\";\n\nconst fetchPics = subReddit => {\n  return Reddit.get(`/r/${subReddit}`);\n};\n\nconst fetchMorePics = (subReddit, after) => {\n\n  return Reddit.get(`/r/${subReddit}`, `after=${after}`);\n};\n\nconst subRedditAutoComplete = (query) => {\n  return Reddit.get(`/api/${'subreddit_autocomplete_v2'}`, `query=${query}&include_over_18=true`);\n};\nexport default {\n  fetchPics,\n  fetchMorePics,\n  subRedditAutoComplete\n};\n","import React, { Component } from \"react\";\nimport \"./searchBar.scss\";\nimport { MdClose, MdSearch } from \"react-icons/md\";\nimport {IoLogoReddit} from \"react-icons/io\";\nimport { inject, observer } from \"mobx-react\";\nimport PropTypes from \"prop-types\";\nimport ClassNames from \"classnames\";\n\n@inject(\"stores\")\n@observer\nclass SearchBar extends Component {\n  static propTypes = {\n    onSearch: PropTypes.func\n  };\n\n  static defaultProps = {\n    onSearch: () => {}\n  };\n\n  onBtnClick = e => {\n    const { HomePageStore } = this.props.stores;\n    e.stopPropagation();\n    if (HomePageStore.showBar) {\n      this.props.onSearch();\n    } else {\n      HomePageStore.showBar = true;\n    }\n  };\n\n  onCloseBtnClick = () => {\n    const { HomePageStore } = this.props.stores;\n    HomePageStore.resetPosts();\n    HomePageStore.subReddit = \"\";\n    HomePageStore.resetSearchInputValue();\n  };\n\n  render() {\n    const { HomePageStore } = this.props.stores;\n    const onChange = e => {\n      HomePageStore.onChangeSearchInputValue(e.target.value);\n    };\n\n    const onKeyPress = e => {\n      if (e.key === \"Enter\") {\n        HomePageStore.resetPosts();\n        this.props.onSearch();\n      }\n    };\n    return (\n      <div className={ClassNames('top-bar', {'top-bar--fixed': HomePageStore.atLeastOnePost})} onClick={e => e.stopPropagation()}>\n        <div className=\"top-bar__searchBar\">\n          <div\n            className={`top-bar__searchBar__search ${\n              HomePageStore.showBar || !HomePageStore.atLeastOnePost ? \"active\" : \"\"\n            }`}\n          >\n            <input\n              className=\"top-bar__searchBar__search__input\"\n              onChange={onChange}\n              onKeyPress={onKeyPress}\n              value={HomePageStore.searchInputValue}\n              placeholder=\"Enter a subReddit\"\n            />\n            <div className=\"btn close-btn\" onClick={this.onCloseBtnClick}>\n              <MdClose />{\" \"}\n            </div>\n          </div>\n          <div className=\"btn top-bar__searchBar__search__btn \" onClick={this.onBtnClick}>\n            <MdSearch />\n          </div>\n        </div>\n        <div className=\"top-bar__autoComplete\">\n            {HomePageStore.subRedditAutoComplete.map((key)=><div className=\"top-bar__autoComplete__item\" onClick={()=>{\n              HomePageStore.searchInputValue = key;\n              HomePageStore.subReddit = key;\n              this.props.onSearch();\n              HomePageStore.subRedditAutoComplete = [];\n            }}><IoLogoReddit className=\"redditIcon\"/>r/{key}</div>)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport PropTypes from \"prop-types\";\nimport { observable } from \"mobx\";\nimport ClassNames from \"classnames\";\nimport \"./image.scss\";\n\n/*\n* Use this component while rendering any image to get the loading and error state.\n* */\n@observer\nclass Image extends Component {\n\n  /*\n  * Prop types\n  * */\n  static propTypes = {\n    alt: PropTypes.string,\n    fallbackElement: PropTypes.element,\n    src: PropTypes.string\n  };\n\n  /*\n  * Default Props\n  * */\n  static defaultProps = {\n    alt: \"Sorry, No Image Found\",\n    fallbackElement: <div className=\"image__fallbackElement\" />\n  };\n\n  /*\n  * Observables\n  * */\n  @observable loading = true;\n\n  /*\n   * Handles image onLoad\n   * */\n  onLoadHandler = () => {\n    this.loading = false;\n  };\n\n  /*\n   * Handles any error occurred during image rendering.\n   * */\n  onErrorHandler = () => {\n    this.loading = false;\n  };\n\n  render() {\n    const imgClasses = ClassNames(\"image__imageTag\",{\n      \"image__imageTag--active\": !this.loading,\n    }, this.props.classNames);\n    return (\n      <div className=\"image\">\n        <img\n          onLoad={this.onLoadHandler.bind(this)}\n          onError={this.onErrorHandler.bind(this)}\n          className={imgClasses}\n          src={this.props.src}\n          alt={this.props.alt}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Image;\n","import React, { Component } from \"react\";\nimport \"./homeComponent.scss\";\nimport {MdFullscreen} from \"react-icons/md\";\nimport Swiper from './swiper'\nimport Api from \"./api\";\nimport {inject, observer} from \"mobx-react\";\nimport SearchBar from \"./components/searchBar/searchBar\";\nimport Image from \"./components/image/image\";\nconst isImage = new RegExp(\"\\\\.(gif|jpg|jpeg|tiff|png)$\");\nconst isGfyCat = new RegExp(\"gfycat\");\n\nfunction Banner(props) {\n  return (<div className={props.className}>Reddit Pics</div>)\n}\n\n@inject(\"stores\")\n@observer\nclass HomeComponent extends Component {\n\n  componentDidMount() {\n    window.onclick =  ()=> {\n      this.props.stores.HomePageStore.showBar = false;\n    };\n  }\n\n  goFullScreen = () => {\n    const { HomePageStore } = this.props.stores;\n    HomePageStore.toggleFullScreen();\n    const elem = document.documentElement;\n    if (!HomePageStore.isFullScreen) {\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        elem.msRequestFullscreen();\n      } else if (elem.mozRequestFullScreen) {\n        elem.mozRequestFullScreen();\n      } else if (elem.webkitRequestFullscreen) {\n        elem.webkitRequestFullscreen();\n      }\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n      }\n    }\n  };\n\n  constructComponent = (post) => {\n    if (isImage.test(post.url.toString())){\n      return <div key={post.name} className=\"item\">\n        <Image src={post.url} alt=\"Could Not Load Image\" />\n      </div>;\n    } else if (isGfyCat.test(post.url.toString())) {\n        const baseUrl = post.url.toString().replace('https://gfycat.com/', 'https://gfycat.com/ifr/');\n        const params = baseUrl.indexOf('?') !== -1? '&autoplay=0&hd=1&controls=1':'?autoplay=1&hd=1&controls=1';\n\n      return <div className=\"gfycat__container item\">\n        <div className=\"gfycat__container__inner\">\n        <iframe className=\"ifr\" title={post.name} src={baseUrl.concat(params)}  frameBorder='0' allowFullScreen width='100%' height='100%' style={{position:'absolute', left: 0, pointerEvents: 'none'}}/>\n        </div>\n      </div>\n    }\n  };\n\n  makeStuff = (resp, clearOld=false) => {\n    const { HomePageStore } = this.props.stores;\n    if (resp.data) {\n      const posts = resp.data.children\n          .map(post => {\n            return { url: post.data.url, name: post.data.name, raw_data: post.data };\n          });\n      const last = resp.data.children.slice(-1)[0];\n      if (clearOld) HomePageStore.resetPosts();\n\n      HomePageStore.appendPosts(posts);\n\n      HomePageStore.lastOne= last? last.data.name: '';\n    }\n  };\n  fillWithPics = () => {\n    const { HomePageStore } = this.props.stores;\n     return Api.fetchPics(HomePageStore.searchInputValue).then(resp => {\n       HomePageStore.subReddit = HomePageStore.searchInputValue;\n      this.makeStuff(resp, true);\n    });\n  };\n\n  loadMorePosts = (e) => {\n    const { HomePageStore } = this.props.stores;\n    e.stopPropagation();\n    Api.fetchMorePics(\n        HomePageStore.subReddit,\n        HomePageStore.lastOne\n    ).then(resp => {\n      this.makeStuff(resp);\n    });\n  };\n\n  render() {\n    const { HomePageStore } = this.props.stores;\n    return (\n      <div className=\"homeComponent\">\n        {!HomePageStore.atLeastOnePost? <Banner className=\"homeComponent__banner\"/>:null}\n        <SearchBar onSearch={this.fillWithPics.bind(this)}/>\n        <div className=\"item-container\">\n          <Swiper>\n          {[...HomePageStore.posts.map(postComponent => {\n            return this.constructComponent(postComponent);\n          }).filter(pc => pc),  HomePageStore.atLeastOnePost ? (\n              <div\n                  className=\"loadMore__btn\"\n                  onClick={this.loadMorePosts}\n              >Load more</div>\n            ) : null]}\n          </Swiper>\n        </div>\n\n        <div className='btn fs__btn' onClick={this.goFullScreen}> <MdFullscreen/> </div>\n      </div>\n    );\n  }\n}\n\nexport default HomeComponent;\n","import {observable} from 'mobx';\n\nclass ExampleStore {\n    constructor(props) {\n        console.log('props :->', props);\n    }\n\n    @observable name = 'test';\n}\n\nexport default ExampleStore;","import {observable, action, computed} from 'mobx';\nimport Api from \"../api\";\n\nclass HomePageStore {\n\n    // observables\n    @observable searchInputValue = '';\n    @observable showBar = true;\n    @observable posts = [];\n    @observable subReddit = '';\n    @observable lastOne = '';\n    @observable isFullScreen = false;\n    @observable subRedditAutoComplete = [];\n\n    @computed\n    get atLeastOnePost() {\n        return this.posts.length > 1;\n    }\n    @action\n    onChangeSearchInputValue(value) {\n        this.searchInputValue = value;\n        if (value.length > 2) {\n        this.fetchAndSetAutoCompleteResults(value);\n        } else {\n            this.subRedditAutoComplete = [];\n        }\n    }\n\n    @action\n    fetchAndSetAutoCompleteResults(query) {\n        Api.subRedditAutoComplete(query).then((resp)=>{\n           if (resp && resp.data && resp.data.children && resp.data.children.length > 0) {\n               const results = resp.data.children.map(listing => listing.data.display_name || null);\n               this.subRedditAutoComplete = results.filter((l)=> l);\n           } else {\n               this.subRedditAutoComplete = [];\n           }\n            \n        });\n    }\n\n    @action\n    resetSearchInputValue() {\n        this.searchInputValue = '';\n        this.subRedditAutoComplete = [];\n    }\n\n    @action\n    toggleFullScreen() {\n        this.isFullScreen = !this.isFullScreen;\n    }\n\n    @action\n    appendPosts(posts) {\n        this.posts.push(...posts);\n    }\n\n    @action\n    resetPosts() {\n        this.posts = [];\n        this.lastOne = '';\n    }\n}\n\nexport default HomePageStore;","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport HomeComponent from \"./homeComponent\";\nimport ExampleStore from \"./stores/exampleStore\";\nimport HomePageStore from \"./stores/homePageStore\";\nimport { Provider } from \"mobx-react\";\n\nclass App extends Component {\n  render() {\n    const stores = {\n      ExampleStore: new ExampleStore(\"Example store initialized\"),\n      HomePageStore: new HomePageStore()\n    };\n    return (\n      <Provider stores={stores}>\n        <div className=\"App\">\n          <HomeComponent />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}