{"version":3,"sources":["redditApi.js","touchControls/touchControls.js","swiper.js","api.js","components/searchBar/searchBar.js","homeComponent.js","stores/exampleStore.js","stores/homePageStore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","get","urlPath","queryParams","query","concat","fetch","then","response","json","TouchControls","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startX","endX","endY","startY","e","console","log","changedTouches","setState","_this2","clientX","clientY","_this2$state","determineGesture","react_default","a","createElement","onTouchCancel","onTouchCancelHandler","bind","onTouchEnd","onTouchEndHandler","onTouchMove","onTouchMoveHandler","onTouchStart","onTouchStartHandler","children","onSwipeLeft","onSwipeRight","React","Component","defaultProps","onSwipeDown","onSwipeUp","Swiper","currentComponent","childCount","length","key","next","previous","touchControls","className","onKeyDown","onKeyPressed","tabIndex","nextProps","api","fetchPics","subReddit","Reddit","fetchMorePics","after","subRedditAutoComplete","SearchBar","inject","observer","onBtnClick","HomePageStore","stores","stopPropagation","showBar","onSearch","onCloseBtnClick","resetPosts","resetSearchInputValue","onClick","onChange","onChangeSearchInputValue","target","value","onKeyPress","searchInputValue","placeholder","index_esm","map","io_index_esm","isImage","RegExp","isGfyCat","HomeComponent","goFullScreen","toggleFullScreen","elem","document","documentElement","isFullScreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","constructComponent","post","test","url","toString","name","src","alt","baseUrl","replace","params","indexOf","title","frameBorder","allowFullScreen","width","height","style","position","top","left","pointerEvents","makeStuff","resp","data","posts","raw_data","last","slice","appendPosts","lastOne","fillWithPics","Api","loadMorePosts","window","onclick","_this3","searchBar_searchBar","src_swiper","toConsumableArray","postComponent","filter","pc","ExampleStore","initializerDefineProperty","_descriptor","observable","fetchAndSetAutoCompleteResults","results","listing","display_name","l","_this$posts","push","apply","action","App","mobx_react_module","src_homeComponent","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45746ce0.chunk.js","sourcesContent":["const HOST = \"https://www.reddit.com\";\n\nconst get = (urlPath, queryParams) => {\n  const query = queryParams ? `?${queryParams}` : \"\";\n  return fetch(`${HOST}${urlPath}.json${query}`).then(response =>\n    response.json()\n  );\n};\n\n\n\nmodule.exports = {\n  get\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass TouchControls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startX: 0,\n      endX: 0,\n      endY: 0,\n      startY: 0\n    };\n  }\n\n  static propTypes = {\n    onSwipeDown: PropTypes.func,\n    onSwipeLeft: PropTypes.func,\n    onSwipeRight: PropTypes.func,\n    onSwipeUp: PropTypes.func\n  };\n\n  static defaultProps = {\n    onSwipeDown: () => {},\n    onSwipeLeft: () => {},\n    onSwipeRight: () => {},\n    onSwipeUp: () => {}\n  };\n  onTouchCancelHandler(e) {\n    console.log(\"cancel: :->\", e.changedTouches[0]);\n    this.setState({\n      startX: 0,\n      startY: 0,\n      endX: 0,\n      endY: 0\n    });\n  }\n  onTouchEndHandler(e) {\n    const clientX = e.changedTouches[0] ? e.changedTouches[0].clientX : 0;\n    const clientY = e.changedTouches[0] ? e.changedTouches[0].clientY : 0;\n    console.log('clientX :->', clientX);\n    \n    this.setState({\n      endX: clientX,\n      endY: clientY\n    }, ()=> {\n      const { startX, startY, endX, endY } = this.state;\n      this.determineGesture(startX, startY, endX, endY);\n    });\n\n  }\n  onTouchMoveHandler(e) {\n    // console.log('move :->', e.changedTouches[0]);\n  }\n  onTouchStartHandler(e) {\n    const clientX = e.changedTouches[0] ? e.changedTouches[0].clientX : 0;\n    const clientY = e.changedTouches[0] ? e.changedTouches[0].clientY : 0;\n    this.setState({\n      startX: clientX,\n      startY: clientY\n    });\n  }\n\n  render() {\n    return (\n      <div\n        onTouchCancel={this.onTouchCancelHandler.bind(this)}\n        onTouchEnd={this.onTouchEndHandler.bind(this)}\n        onTouchMove={this.onTouchMoveHandler.bind(this)}\n        onTouchStart={this.onTouchStartHandler.bind(this)}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n\n  determineGesture(startX, startY, endX) {\n    if (startX - endX > 100) {\n        this.props.onSwipeLeft();\n    } else if (endX - startX > 100) {\n        this.props.onSwipeRight();\n    }\n    this.setState({\n      startX: 0,\n      startY: 0,\n      endX: 0,\n      endY: 0\n    });\n  }\n}\n\nexport default TouchControls;\n","import React, { Component } from \"react\";\nimport \"./swiper.scss\";\nimport TouchControls from \"./touchControls/touchControls\";\n// import { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass Swiper extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentComponent: 0,\n      childCount: props.children.length\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    return {\n      childCount: nextProps.children.length\n    };\n  }\n\n  onKeyPressed(e) {\n    if (e.key === \"ArrowRight\") {\n      this.next();\n    } else if (e.key === \"ArrowLeft\") {\n      this.previous();\n    }\n  }\n\n  next() {\n    this.setState({\n      currentComponent:\n        this.state.childCount - 1 > this.state.currentComponent\n          ? this.state.currentComponent + 1\n          : 0\n    });\n  }\n\n  previous() {\n    this.setState({\n      currentComponent:\n        0 < this.state.currentComponent ? this.state.currentComponent - 1 : 0\n    });\n  }\n  render() {\n    return (\n      <TouchControls\n        onSwipeRight={this.previous.bind(this)}\n        onSwipeLeft={this.next.bind(this)}\n      >\n        <div\n          className=\"swiper\"\n          onKeyDown={e => this.onKeyPressed(e)}\n          tabIndex={0}\n        >\n          {this.state.childCount > 0\n            ? this.props.children[this.state.currentComponent]\n            : null}\n        </div>\n      </TouchControls>\n    );\n  }\n}\n\nexport default Swiper;\n","import Reddit from \"./redditApi\";\n\nconst fetchPics = subReddit => {\n  return Reddit.get(`/r/${subReddit}`);\n};\n\nconst fetchMorePics = (subReddit, after) => {\n\n  return Reddit.get(`/r/${subReddit}`, `after=${after}`);\n};\n\nconst subRedditAutoComplete = (query) => {\n  return Reddit.get(`/api/${'subreddit_autocomplete_v2'}`, `query=${query}&include_over_18=true`);\n};\nexport default {\n  fetchPics,\n  fetchMorePics,\n  subRedditAutoComplete\n};\n","import React, { Component } from \"react\";\nimport \"./searchBar.scss\";\nimport { MdClose, MdSearch } from \"react-icons/md\";\nimport {IoLogoReddit} from \"react-icons/io\";\nimport { inject, observer } from \"mobx-react\";\nimport PropTypes from \"prop-types\";\n\n@inject(\"stores\")\n@observer\nclass SearchBar extends Component {\n  static propTypes = {\n    onSearch: PropTypes.func\n  };\n\n  static defaultProps = {\n    onSearch: () => {}\n  };\n\n  onBtnClick = e => {\n    const { HomePageStore } = this.props.stores;\n    e.stopPropagation();\n    if (HomePageStore.showBar) {\n      this.props.onSearch();\n    } else {\n      HomePageStore.showBar = true;\n    }\n  };\n\n  onCloseBtnClick = () => {\n    const { HomePageStore } = this.props.stores;\n    HomePageStore.resetPosts();\n    HomePageStore.subReddit = \"\";\n    HomePageStore.resetSearchInputValue();\n  };\n\n  render() {\n    const { HomePageStore } = this.props.stores;\n    const onChange = e => {\n      HomePageStore.onChangeSearchInputValue(e.target.value);\n    };\n\n    const onKeyPress = e => {\n      if (e.key === \"Enter\") {\n        HomePageStore.resetPosts();\n        this.props.onSearch();\n      }\n    };\n    return (\n      <div className=\"top-bar\" onClick={e => e.stopPropagation()}>\n        <div className=\"top-bar__searchBar\">\n          <div\n            className={`top-bar__searchBar__search ${\n              HomePageStore.showBar ? \"active\" : \"\"\n            }`}\n          >\n            <input\n              className=\"top-bar__searchBar__search__input\"\n              onChange={onChange}\n              onKeyPress={onKeyPress}\n              value={HomePageStore.searchInputValue}\n              placeholder=\"Enter a subReddit\"\n            />\n            <div className=\"btn close-btn\" onClick={this.onCloseBtnClick}>\n              <MdClose />{\" \"}\n            </div>\n          </div>\n          <div className=\"btn top-bar__searchBar__search__btn \" onClick={this.onBtnClick}>\n            <MdSearch />\n          </div>\n        </div>\n        <div className=\"top-bar__autoComplete\">\n            {HomePageStore.subRedditAutoComplete.map((key)=><div className=\"top-bar__autoComplete__item\" onClick={()=>{\n              HomePageStore.searchInputValue = key;\n              HomePageStore.subReddit = key;\n              this.props.onSearch();\n              HomePageStore.subRedditAutoComplete = [];\n            }}><IoLogoReddit className=\"redditIcon\"/>r/{key}</div>)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport \"./homeComponent.scss\";\nimport {MdFullscreen} from \"react-icons/md\";\nimport Swiper from './swiper'\nimport Api from \"./api\";\nimport {inject, observer} from \"mobx-react\";\nimport SearchBar from \"./components/searchBar/searchBar\";\nconst isImage = new RegExp(\"\\\\.(gif|jpg|jpeg|tiff|png)$\");\nconst isGfyCat = new RegExp(\"gfycat\");\n\n@inject(\"stores\")\n@observer\nclass HomeComponent extends Component {\n\n  componentDidMount() {\n    window.onclick =  ()=> {\n      this.props.stores.HomePageStore.showBar = false;\n    };\n  }\n\n  goFullScreen = () => {\n    const { HomePageStore } = this.props.stores;\n    HomePageStore.toggleFullScreen();\n    const elem = document.documentElement;\n    if (!HomePageStore.isFullScreen) {\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        elem.msRequestFullscreen();\n      } else if (elem.mozRequestFullScreen) {\n        elem.mozRequestFullScreen();\n      } else if (elem.webkitRequestFullscreen) {\n        elem.webkitRequestFullscreen();\n      }\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n      }\n    }\n  };\n\n  constructComponent = (post) => {\n    if (isImage.test(post.url.toString())){\n      return <div key={post.name} className=\"item\">\n        <img src={post.url} alt=\"pic here\" />\n      </div>;\n    } else if (isGfyCat.test(post.url.toString())) {\n        const baseUrl = post.url.toString().replace('https://gfycat.com/', 'https://gfycat.com/ifr/');\n        const params = baseUrl.indexOf('?') !== -1? '&autoplay=0&hd=1&controls=1':'?autoplay=1&hd=1&controls=1';\n\n      return <div className=\"gfycat__container item\">\n        <iframe title={post.name} src={baseUrl.concat(params)}  frameBorder='0' allowFullScreen width='100%' height='100%' style={{position:'absolute', top:0, left: 0, pointerEvents: 'none'}}/></div>\n    }\n  };\n\n  makeStuff = (resp) => {\n    const { HomePageStore } = this.props.stores;\n    if (resp.data) {\n      const posts = resp.data.children\n          .map(post => {\n            return { url: post.data.url, name: post.data.name, raw_data: post.data };\n          });\n      const last = resp.data.children.slice(-1)[0];\n      HomePageStore.appendPosts(posts);\n      HomePageStore.lastOne= last? last.data.name: '';\n    }\n  };\n  fillWithPics = () => {\n    const { HomePageStore } = this.props.stores;\n     return Api.fetchPics(HomePageStore.searchInputValue).then(resp => {\n       HomePageStore.subReddit = HomePageStore.searchInputValue;\n      this.makeStuff(resp);\n    });\n  };\n\n  loadMorePosts = (e) => {\n    const { HomePageStore } = this.props.stores;\n    e.stopPropagation();\n    Api.fetchMorePics(\n        HomePageStore.subReddit,\n        HomePageStore.lastOne\n    ).then(resp => {\n      this.makeStuff(resp);\n    });\n  };\n\n  render() {\n    const { HomePageStore } = this.props.stores;\n    return (\n      <div className=\"homeComponent\">\n        <SearchBar onSearch={this.fillWithPics.bind(this)}/>\n        <div className=\"item-container\">\n          <Swiper>\n          {[...HomePageStore.posts.map(postComponent => {\n            return this.constructComponent(postComponent);\n          }).filter(pc => pc),  HomePageStore.posts.length > 1 ? (\n                <div\n                    className=\"btn top-bar__btn load-more__btn\"\n                    onClick={this.loadMorePosts}\n                >\n                  {\" \"}\n                  Load more{\" \"}\n                </div>\n            ) : null]}\n          </Swiper>\n        </div>\n\n        <div className='btn fs__btn' onClick={this.goFullScreen}> <MdFullscreen/> </div>\n      </div>\n    );\n  }\n}\n\nexport default HomeComponent;\n","import {observable} from 'mobx';\n\nclass ExampleStore {\n    constructor(props) {\n        console.log('props :->', props);\n    }\n\n    @observable name = 'test';\n}\n\nexport default ExampleStore;","import {observable, action} from 'mobx';\nimport Api from \"../api\";\n\nclass HomePageStore {\n\n    // observables\n    @observable searchInputValue = '';\n    @observable showBar = true;\n    @observable posts = [];\n    @observable subReddit = '';\n    @observable lastOne = '';\n    @observable isFullScreen = false;\n    @observable subRedditAutoComplete = [];\n\n    @action\n    onChangeSearchInputValue(value) {\n        this.searchInputValue = value;\n        if (value.length > 2) {\n        this.fetchAndSetAutoCompleteResults(value);\n        } else {\n            this.subRedditAutoComplete = [];\n        }\n    }\n\n    @action\n    fetchAndSetAutoCompleteResults(query) {\n        Api.subRedditAutoComplete(query).then((resp)=>{\n           if (resp && resp.data && resp.data.children && resp.data.children.length > 0) {\n               const results = resp.data.children.map(listing => listing.data.display_name || null);\n               this.subRedditAutoComplete = results.filter((l)=> l);\n           } else {\n               this.subRedditAutoComplete = [];\n           }\n            \n        });\n    }\n\n    @action\n    resetSearchInputValue() {\n        this.searchInputValue = '';\n        this.subRedditAutoComplete = [];\n    }\n\n    @action\n    toggleFullScreen() {\n        this.isFullScreen = !this.isFullScreen;\n    }\n\n    @action\n    appendPosts(posts) {\n        this.posts.push(...posts);\n    }\n\n    @action\n    resetPosts() {\n        this.posts = [];\n        this.lastOne = '';\n    }\n}\n\nexport default HomePageStore;","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport HomeComponent from \"./homeComponent\";\nimport ExampleStore from \"./stores/exampleStore\";\nimport HomePageStore from \"./stores/homePageStore\";\nimport { Provider } from \"mobx-react\";\n\nclass App extends Component {\n  render() {\n    const stores = {\n      ExampleStore: new ExampleStore(\"Example store initialized\"),\n      HomePageStore: new HomePageStore()\n    };\n    return (\n      <Provider stores={stores}>\n        <div className=\"App\">\n          <HomeComponent />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}