{"version":3,"sources":["api.js","redditApi.js","App.js","serviceWorker.js","index.js"],"names":["Reddit","require","module","exports","fetchPics","subReddit","get","concat","fetchMorePics","after","urlPath","queryParams","query","fetch","then","response","json","Api","isImage","RegExp","isGfyCat","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","goFullScreen","setState","isFullScreen","state","elem","document","documentElement","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","topBar","react_default","a","createElement","className","onChange","e","target","value","onKeyPress","key","posts","lastOne","fillWithPics","placeholder","onClick","onCloseBtnClick","onBtnClick","constructComponent","post","test","url","toString","name","src","alt","baseUrl","replace","title","frameborder","allowfullscreen","width","height","style","position","top","left","makeStuff","resp","data","children","map","raw_data","last","slice","toConsumableArray","loadMorePosts","postComponent","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d23d866.chunk.js","sourcesContent":["const Reddit = require(\"./redditApi\");\n\nconst fetchPics = subReddit => {\n  return Reddit.get(`/r/${subReddit}`);\n};\n\nconst fetchMorePics = (subReddit, after) => {\n\n  return Reddit.get(`/r/${subReddit}`, `after=${after}`);\n};\n\nmodule.exports = {\n  fetchPics,\n  fetchMorePics\n};\n","const HOST = \"https://www.reddit.com\";\n\nconst get = (urlPath, queryParams) => {\n  const query = queryParams ? `?${queryParams}` : \"\";\n  return fetch(`${HOST}${urlPath}.json${query}`).then(response =>\n    response.json()\n  );\n};\n\n\n\nmodule.exports = {\n  get\n};\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\n\nconst Api = require(\"./api\");\nconst isImage = new RegExp(\"\\\\.(gif|jpg|jpeg|tiff|png)$\");\nconst isGfyCat = new RegExp(\"gfycat\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: [],\n      subReddit: \"\",\n      lastOne: \"\",\n      isFullScreen: false\n    };\n  }\n\n  // componentDidMount() {\n  //   this.fillWithPics();\n  // }\n\n  goFullScreen = () => {\n    this.setState({isFullScreen: !this.state.isFullScreen});\n    const elem = document.documentElement;\n    if (!this.state.isFullScreen) {\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        elem.msRequestFullscreen();\n      } else if (elem.mozRequestFullScreen) {\n        elem.mozRequestFullScreen();\n      } else if (elem.webkitRequestFullscreen) {\n        elem.webkitRequestFullscreen();\n      }\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n      }\n    }\n  };\n\n  topBar = () => {\n    const onChange = e => {\n        this.setState({\n          subReddit: e.target.value\n        });\n    };\n\n    const onKeyPress = e => {\n      if (e.key === \"Enter\") {\n        this.setState({posts: [], lastOne:\"\"});\n        this.fillWithPics();\n      }\n    };\n    return (\n      <div className=\"top-bar\">\n        <div className=\"top-bar__search\">\n          <input\n            className=\"top-bar__input\"\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n            value={this.state.subReddit}\n            placeholder=\"Enter a subReddit\"\n          />\n          <button className=\"btn close-btn\" onClick={this.onCloseBtnClick} >X</button>\n        </div>\n        <button className=\"btn top-bar__btn \" onClick={this.onBtnClick}>\n          Get Pics!\n        </button>\n      </div>\n    );\n  };\n\n  constructComponent = (post) => {\n    if (isImage.test(post.url.toString())) {\n      return <div key={post.name} className=\"item\">\n        <img src={post.url} alt=\"pic here\" />\n      </div>;\n    } else if (isGfyCat.test(post.url.toString())) {\n        const baseUrl = post.url.toString().replace('https://gfycat.com/', 'https://gfycat.com/ifr/');\n        const params = '&autoplay=0&hd=1&controls=1';\n\n      return <div className=\"gfycat__container\">\n        <iframe title={post.name} src={baseUrl.concat(params)}  frameborder='0' allowfullscreen width='100%' height='100%' style={{position:'absolute', top:0, left: 0}}/></div>\n    }\n  };\n\n  makeStuff = (resp) => {\n    if (resp.data) {\n      const posts = resp.data.children\n          .map(post => {\n            return this.constructComponent({ url: post.data.url, name: post.data.name, raw_data: post.data });\n          });\n      const last = resp.data.children.slice(-1)[0];\n      this.setState({\n        posts: [...this.state.posts, ...posts],\n        lastOne: last? last.data.name: '',\n      });\n    }\n  };\n  fillWithPics = () => {\n    Api.fetchPics(this.state.subReddit).then(resp => {\n      this.makeStuff(resp);\n    });\n  };\n\n  onBtnClick = () => {\n    this.fillWithPics();\n  };\n\n  onCloseBtnClick = () => {\n    this.setState({posts: [], subReddit:\"\", lastOne:\"\"})\n  };\n\n  loadMorePosts = () => {\n    Api.fetchMorePics(\n      this.state.subReddit,\n      this.state.lastOne\n    ).then(resp => {\n      this.makeStuff(resp);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.topBar()}\n\n        <div className=\"item-container\">\n          {this.state.posts.map(postComponent => {\n            return (postComponent);\n          })}\n        </div>\n        {this.state.posts.length > 1 ? (\n          <div\n            className=\"btn top-bar__btn load-more__btn\"\n            onClick={this.loadMorePosts}\n          >\n            {\" \"}\n            Load more{\" \"}\n          </div>\n        ) : null}\n        <div className='btn fs__btn' onClick={this.goFullScreen}> {'< >'} </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}