{"version":3,"sources":["api.js","redditApi.js","swiper.js","App.js","serviceWorker.js","index.js"],"names":["Reddit","require","module","exports","fetchPics","subReddit","get","concat","fetchMorePics","after","urlPath","queryParams","query","fetch","then","response","json","Swiper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentComponent","childCount","children","length","nextProps","nextContext","setState","e","fromKey","console","log","key","_this2","react_default","a","createElement","className","onClick","swipe","bind","onKeyDown","onKeyPressed","tabIndex","Component","Api","isImage","RegExp","isGfyCat","App","goFullScreen","isFullScreen","elem","document","documentElement","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","topBar","stopPropagation","showBar","onChange","target","value","onKeyPress","posts","lastOne","fillWithPics","placeholder","onCloseBtnClick","index_esm","onBtnClick","constructComponent","post","test","url","toString","name","src","alt","baseUrl","replace","params","indexOf","title","frameborder","allowfullscreen","width","height","style","position","top","left","makeStuff","resp","data","map","raw_data","last","slice","toConsumableArray","loadMorePosts","window","onclick","src_swiper","postComponent","filter","pc","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ca0d46b.chunk.js","sourcesContent":["const Reddit = require(\"./redditApi\");\n\nconst fetchPics = subReddit => {\n  return Reddit.get(`/r/${subReddit}`);\n};\n\nconst fetchMorePics = (subReddit, after) => {\n\n  return Reddit.get(`/r/${subReddit}`, `after=${after}`);\n};\n\nmodule.exports = {\n  fetchPics,\n  fetchMorePics\n};\n","const HOST = \"https://www.reddit.com\";\n\nconst get = (urlPath, queryParams) => {\n  const query = queryParams ? `?${queryParams}` : \"\";\n  return fetch(`${HOST}${urlPath}.json${query}`).then(response =>\n    response.json()\n  );\n};\n\n\n\nmodule.exports = {\n  get\n};\n","import React, { Component } from \"react\";\nimport \"./swiper.scss\";\n\nclass Swiper extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentComponent: 0,\n            childCount: props.children.length\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        this.setState({\n            childCount: nextProps.children.length\n        });\n    }\n\n    swipe(e, fromKey) {\n        console.log(e);\n        console.log(fromKey);\n        this.setState({\n            currentComponent: this.state.childCount-1 > this.state.currentComponent? this.state.currentComponent+1:0,\n        });\n    }\n    onKeyPressed(e) {\n        console.log(e.key);\n        if (e.key === 'ArrowRight') {\n            this.setState({\n                currentComponent: this.state.childCount-1 > this.state.currentComponent? this.state.currentComponent+1:0,\n            });\n        } else if (e.key === 'ArrowLeft') {\n            this.setState({\n                currentComponent: 0 < this.state.currentComponent? this.state.currentComponent-1:0,\n            });\n        }\n\n    }\n    render() {\n        return (\n            <div className=\"swiper\" onClick={this.swipe.bind(this, true)}  onKeyDown={(e) => this.onKeyPressed(e)} tabIndex={0}>\n                {this.state.childCount > 0 ? this.props.children[this.state.currentComponent]: null}\n            </div>\n        );\n    }\n}\n\nexport default Swiper;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport {MdClose, MdFullscreen, MdSearch} from \"react-icons/md\";\nimport Swiper from './swiper'\nconst Api = require(\"./api\");\nconst isImage = new RegExp(\"\\\\.(gif|jpg|jpeg|tiff|png)$\");\nconst isGfyCat = new RegExp(\"gfycat\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: [],\n      subReddit: \"\",\n      lastOne: \"\",\n      isFullScreen: false,\n      showBar: true\n    };\n  }\n\n  componentDidMount() {\n    window.onclick =  ()=> {\n      this.setState({showBar: false})\n    };\n  }\n\n  goFullScreen = () => {\n    this.setState({isFullScreen: !this.state.isFullScreen});\n    const elem = document.documentElement;\n    if (!this.state.isFullScreen) {\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        elem.msRequestFullscreen();\n      } else if (elem.mozRequestFullScreen) {\n        elem.mozRequestFullScreen();\n      } else if (elem.webkitRequestFullscreen) {\n        elem.webkitRequestFullscreen();\n      }\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n      }\n    }\n  };\n\n  topBar = () => {\n    const onChange = e => {\n        this.setState({\n          subReddit: e.target.value\n        });\n    };\n\n    const onKeyPress = e => {\n      if (e.key === \"Enter\") {\n        this.setState({posts: [], lastOne:\"\"});\n        this.fillWithPics();\n      }\n    };\n    return (\n      <div className=\"top-bar\" onClick={e => e.stopPropagation()}>\n        <div className={`top-bar__search ${this.state.showBar? 'active': ''}`}>\n          <input\n            className=\"top-bar__input\"\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n            value={this.state.subReddit}\n            placeholder=\"Enter a subReddit\"\n          />\n          <div className=\"btn close-btn\" onClick={this.onCloseBtnClick} ><MdClose/> </div>\n        </div>\n        <div className=\"btn top-bar__btn \" onClick={this.onBtnClick}>\n          <MdSearch/>\n        </div>\n      </div>\n    );\n  };\n\n  constructComponent = (post) => {\n    if (isImage.test(post.url.toString())){\n      return <div key={post.name} className=\"item\">\n        <img src={post.url} alt=\"pic here\" />\n      </div>;\n    } else if (isGfyCat.test(post.url.toString())) {\n        const baseUrl = post.url.toString().replace('https://gfycat.com/', 'https://gfycat.com/ifr/');\n        const params = baseUrl.indexOf('?') !== -1? '&autoplay=0&hd=1&controls=1':'?autoplay=0&hd=1&controls=1';\n\n      return <div className=\"gfycat__container\">\n        <iframe title={post.name} src={baseUrl.concat(params)}  frameborder='0' allowfullscreen width='100%' height='100%' style={{position:'absolute', top:0, left: 0}}/></div>\n    }\n  };\n\n  makeStuff = (resp) => {\n    if (resp.data) {\n      const posts = resp.data.children\n          .map(post => {\n            return this.constructComponent({ url: post.data.url, name: post.data.name, raw_data: post.data });\n          });\n      const last = resp.data.children.slice(-1)[0];\n      this.setState({\n        posts: [...this.state.posts, ...posts],\n        lastOne: last? last.data.name: '',\n      });\n    }\n  };\n  fillWithPics = () => {\n     return Api.fetchPics(this.state.subReddit).then(resp => {\n      this.makeStuff(resp);\n    });\n  };\n\n  onBtnClick = (e) => {\n    e.stopPropagation();\n    if (this.state.showBar) {\n\n      this.fillWithPics();\n\n    } else {\n      this.setState({showBar: true});\n    }\n\n  };\n\n  onCloseBtnClick = () => {\n    this.setState({posts: [], subReddit:\"\", lastOne:\"\"})\n  };\n\n  loadMorePosts = (e) => {\n    e.stopPropagation();\n    Api.fetchMorePics(\n      this.state.subReddit,\n      this.state.lastOne\n    ).then(resp => {\n      this.makeStuff(resp);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.topBar()}\n\n        <div className=\"item-container\">\n          <Swiper>\n          {[...this.state.posts.map(postComponent => {\n            return (postComponent);\n          }).filter(pc => pc),  this.state.posts.length > 1 ? (\n                <div\n                    className=\"btn top-bar__btn load-more__btn\"\n                    onClick={this.loadMorePosts}\n                >\n                  {\" \"}\n                  Load more{\" \"}\n                </div>\n            ) : null]}\n          </Swiper>\n        </div>\n\n        <div className='btn fs__btn' onClick={this.goFullScreen}> <MdFullscreen/> </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}